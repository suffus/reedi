services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: reedi-postgres
    environment:
      POSTGRES_DB: reedi
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - reedi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: reedi-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/reedi
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      PORT: 8088
    ports:
      - "8089:8088"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - reedi-network
    restart: unless-stopped

  # Next.js Application (serves dynamic content)
  nextjs:
    build:
      context: .
      dockerfile: Dockerfile.nextjs
    container_name: reedi-nextjs
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:8088/api
      NEXT_PUBLIC_BACKEND_URL: http://backend:8088
      NEXT_PUBLIC_IMAGE_BASE_URL: http://backend:8088
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-change-in-production}
    depends_on:
      - backend
    networks:
      - reedi-network
    restart: unless-stopped

  # Nginx Reverse Proxy (serves static content and proxies to Next.js)
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: reedi-nginx
    ports:
      - "80:80"
    depends_on:
      - nextjs
      - backend
    networks:
      - reedi-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  reedi-network:
    driver: bridge 
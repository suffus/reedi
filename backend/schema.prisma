generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  email                  String          @unique
  name                   String
  username               String?         @unique
  password               String
  avatar                 String?
  bio                    String?
  location               String?
  website                String?
  isPrivate              Boolean         @default(false)
  isVerified             Boolean         @default(false)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  comments               Comment[]
  followers              Follows[]       @relation("UserFollowers")
  following              Follows[]       @relation("UserFollowing")
  friendRequestsReceived FriendRequest[] @relation("UserFriendRequestsReceived")
  friendRequestsSent     FriendRequest[] @relation("UserFriendRequestsSent")
  galleries              Gallery[]
  images                 Image[]
  mentions               Mention[]
  notifications          Notification[]
  posts                  Post[]
  reactions              Reaction[]
  searchHistory          SearchHistory[]

  @@map("users")
}

model Post {
  id                String            @id @default(cuid())
  title             String?
  content           String
  authorId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  publicationStatus PublicationStatus @default(PUBLIC)
  visibility        Visibility        @default(PUBLIC)
  comments          Comment[]
  mentions          Mention[]
  notifications     Notification[]
  images            PostImage[]
  author            User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions         Reaction[]
  hashtags          Hashtag[]         @relation("HashtagToPost")

  @@map("posts")
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  postId        String?
  authorId      String
  parentId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageId       String?
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  image         Image?         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  parent        Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]      @relation("CommentReplies")
  post          Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]
  reactions     Reaction[]

  @@map("comments")
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  postId    String?
  commentId String?
  authorId  String
  createdAt DateTime     @default(now())
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, authorId])
  @@unique([commentId, authorId])
  @@map("reactions")
}

model Image {
  id             String      @id @default(cuid())
  url            String
  altText        String?
  caption        String?
  width          Int?
  height         Int?
  size           Int?
  mimeType       String?
  postId         String?
  authorId       String
  galleryId      String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tags           String[]    @default([])
  thumbnail      String?
  s3Key          String?
  thumbnailS3Key String?
  visibility     Visibility  @default(PUBLIC)
  comments       Comment[]
  author         User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  gallery        Gallery?    @relation(fields: [galleryId], references: [id])
  posts          PostImage[]

  @@map("images")
}

model Gallery {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images      Image[]

  @@map("galleries")
}

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]   @relation("HashtagToPost")

  @@map("hashtags")
}

model Mention {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("mentions")
}

model Follows {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model FriendRequest {
  id         String              @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  receiver   User                @relation("UserFriendRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User                @relation("UserFriendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model PostImage {
  id      String @id @default(cuid())
  postId  String
  imageId String
  order   Int
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, imageId])
  @@map("post_images")
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum PublicationStatus {
  PUBLIC
  PAUSED
  CONTROLLED
  DELETED
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum NotificationType {
  NEW_FOLLOWER
  NEW_COMMENT
  NEW_REACTION
  MENTION
  POST_LIKE
  COMMENT_LIKE
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Optimize connection pool settings for high concurrency
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  username  String?  @unique
  password  String
  avatar    String?
  bio       String?
  location  String?
  website   String?
  isPrivate Boolean  @default(false)
  isVerified Boolean @default(false)
  canPublishLockedMedia Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Posts
  posts Post[]

  // Comments
  comments Comment[]

  // Reactions
  reactions Reaction[]

  // Media (renamed from Images)
  media Media[]

  // Galleries
  galleries Gallery[]

  // Followers/Following (self-referencing many-to-many)
  followers Follows[] @relation("UserFollowers")
  following Follows[] @relation("UserFollowing")

  // Friend requests
  friendRequestsSent     FriendRequest[] @relation("UserFriendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation("UserFriendRequestsReceived")

  // Notifications
  notifications Notification[]

  // Search history
  searchHistory SearchHistory[]
  
  // Mentions
  mentions Mention[]

  // Video processing jobs
  mediaProcessingJobs MediaProcessingJob[]

  // Messaging relations
  conversationsCreated Conversation[] @relation("ConversationCreator")
  conversationParticipants ConversationParticipant[] @relation("ConversationParticipants")
  messagesSent Message[] @relation("MessageSender")
  messageDeliveryStatus MessageDeliveryStatus[] @relation("MessageDeliveryStatus")
  messageReactions MessageReaction[] @relation("MessageReactions")
  userSessions UserSession[] @relation("UserSessions")
  
  // Locked content relations
  unlockedPosts UnlockedPost[] @relation("UnlockedPosts")
  unlockedMessages UnlockedMessage[] @relation("UnlockedMessages")

  @@map("users")
}

model Post {
  id                String            @id @default(cuid())
  title             String?
  content           String
  publicationStatus PublicationStatus @default(PUBLIC)
  visibility        Visibility        @default(PUBLIC)
  authorId          String
  isLocked          Boolean           @default(false)
  unlockPrice       Int?              // Price in tokens to unlock the post
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  reactions Reaction[]
  media     PostMedia[]
  hashtags  Hashtag[]
  mentions  Mention[]
  notifications Notification[]
  unlockedBy UnlockedPost[] @relation("UnlockedPosts")

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String?
  mediaId   String?
  authorId  String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post     Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  media    Media?    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies  Comment[] @relation("CommentReplies")
  reactions Reaction[]
  notifications Notification[]

  @@map("comments")
}

model Reaction {
  id        String   @id @default(cuid())
  type      ReactionType
  postId    String?
  commentId String?
  authorId  String
  createdAt DateTime @default(now())

  // Relations
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([postId, authorId])
  @@unique([commentId, authorId])
  @@map("reactions")
}

model Media {
  id             String     @id @default(cuid())
  url            String     // Path to the full-size media file
  thumbnail      String?    // Path to the thumbnail file
  s3Key          String?    // S3 key for the original media
  thumbnailS3Key String?    // S3 key for the thumbnail
  originalFilename String?  // Original filename from user's device
  altText        String?
  caption        String?
  width          Int?
  height         Int?
  size           Int?       // File size in bytes
  mimeType       String?
  tags           String[]   @default([])  // Array of tag strings
  visibility     Visibility @default(PUBLIC)
  postId         String?
  authorId       String
  galleryId      String?
  order          Int        @default(0)
  
  // Media type and processing status
  mediaType      MediaType  @default(IMAGE)
  processingStatus ProcessingStatus @default(COMPLETED)
  
  // Video-specific fields
  duration       Float?     // Duration in seconds
  codec          String?    // Video codec (e.g., "h264", "h265")
  bitrate        Int?       // Bitrate in kbps
  framerate      Float?     // Frames per second
  videoUrl       String?    // Path to processed video file
  videoS3Key     String?    // S3 key for processed video
  
  // Video processing fields
  videoProcessingStatus ProcessingStatus? // Status of video processing
  videoThumbnails Json?    // Array of thumbnail S3 keys and metadata
  videoVersions   Json?    // Array of video version S3 keys and metadata
  videoMetadata   Json?    // Video metadata
  
  // Image processing fields
  imageProcessingStatus ProcessingStatus? // Status of image processing
  imageVersions   Json?    // Array of image version S3 keys and metadata
  imageMetadata   Json?    // Image metadata
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  posts     PostMedia[]
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  gallery  Gallery?  @relation(fields: [galleryId], references: [id], onDelete: SetNull)
  coverForGallery Gallery? @relation("GalleryCover")
  comments Comment[]
  mediaProcessingJobs MediaProcessingJob[]
  messages Message[] @relation("MessageMedia")
  messageMediaItems MessageMedia[] @relation("MessageMediaItems")

  @@map("media")
}

model Gallery {
  id          String   @id @default(cuid())
  name        String
  description String?
  visibility  Visibility @default(PUBLIC)
  coverMediaId String?  @unique
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author     User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  media      Media[]
  coverMedia Media?  @relation("GalleryCover", fields: [coverMediaId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("galleries")
}

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  posts Post[]

  @@map("hashtags")
}

model Mention {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("mentions")
}

model Follows {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model FriendRequest {
  id          String           @id @default(cuid())
  senderId    String
  receiverId  String
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  sender   User @relation("UserFriendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("UserFriendRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("notifications")
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model PostMedia {
  id     String @id @default(cuid())
  postId String
  mediaId String
  order  Int    @default(0)
  isLocked Boolean @default(false)

  // Relations
  post  Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@map("post_media")
}

model MediaProcessingJob {
  id                String           @id @default(cuid())
  mediaId           String
  userId            String
  mediaType         MediaType        // IMAGE or VIDEO
  s3Key             String           // S3 key of the original media
  originalFilename  String
  status            ProcessingStatus @default(PENDING)
  progress          Int              @default(0) // 0-100
  currentStep       String?
  errorMessage      String?
  
  // Video-specific fields
  thumbnails        Json?            // Array of thumbnail S3 keys and metadata
  videoVersions     Json?            // Array of video version S3 keys and metadata
  
  // Image-specific fields
  imageVersions     Json?            // Array of image version S3 keys and metadata
  
  metadata          Json?            // Media metadata
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  completedAt       DateTime?

  // Relations
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media_processing_jobs")
}

// Enums
enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum PublicationStatus {
  PUBLIC
  PAUSED
  CONTROLLED
  DELETED
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
  FAILED
}

// Messaging Models
model Conversation {
  id              String            @id @default(cuid())
  type            ConversationType  @default(DIRECT)
  name            String?           // For group chats
  avatarUrl       String?           // For group chats
  createdById     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastMessageAt   DateTime?
  isActive        Boolean           @default(true)

  // Relations
  createdBy       User              @relation("ConversationCreator", fields: [createdById], references: [id], onDelete: Cascade)
  participants    ConversationParticipant[]
  messages        Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id              String            @id @default(cuid())
  conversationId  String
  userId          String
  role            ParticipantRole   @default(MEMBER)
  joinedAt        DateTime          @default(now())
  leftAt          DateTime?
  isActive        Boolean           @default(true)

  // Relations
  conversation    Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User              @relation("ConversationParticipants", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id                String        @id @default(cuid())
  conversationId    String
  senderId          String
  content           String?
  messageType       MessageType   @default(TEXT)
  mediaId           String?
  replyToId         String?
  encryptedContent  String?       // For future E2E encryption
  encryptionVersion Int           @default(1)
  isLocked          Boolean       @default(false)
  unlockPrice       Int?          // Price in tokens to unlock the message
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isDeleted         Boolean       @default(false)

  // Relations
  conversation      Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender            User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  media             Media?        @relation("MessageMedia", fields: [mediaId], references: [id], onDelete: SetNull)
  mediaItems        MessageMedia[] @relation("MessageMediaItems")
  deliveryStatus    MessageDeliveryStatus[]
  reactions         MessageReaction[]
  unlockedBy        UnlockedMessage[] @relation("UnlockedMessages")

  @@map("messages")
}

model MessageMedia {
  id     String @id @default(cuid())
  messageId String
  mediaId String
  order  Int    @default(0)
  isLocked Boolean @default(false)

  // Relations
  message Message @relation("MessageMediaItems", fields: [messageId], references: [id], onDelete: Cascade)
  media   Media   @relation("MessageMediaItems", fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([messageId, mediaId])
  @@map("message_media")
}

model MessageDeliveryStatus {
  id          String          @id @default(cuid())
  messageId   String
  userId      String
  status      DeliveryStatus  @default(SENT)
  deliveredAt DateTime?
  readAt      DateTime?

  // Relations
  message     Message         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User            @relation("MessageDeliveryStatus", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_delivery_status")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  reaction  String   // Emoji
  createdAt DateTime @default(now())

  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation("MessageReactions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, reaction])
  @@map("message_reactions")
}

model UnlockedPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  paidAmount Int     // Amount paid in tokens
  unlockedAt DateTime @default(now())

  // Relations
  user      User     @relation("UnlockedPosts", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation("UnlockedPosts", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("unlocked_posts")
}

model UnlockedMessage {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  paidAmount Int     // Amount paid in tokens
  unlockedAt DateTime @default(now())

  // Relations
  user      User     @relation("UnlockedMessages", fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation("UnlockedMessages", fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
  @@map("unlocked_messages")
}

model UserSession {
  id         String   @id @default(cuid())
  userId     String
  sessionId  String   @unique
  deviceInfo Json?
  lastSeen   DateTime @default(now())
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Messaging Enums
enum ConversationType {
  DIRECT
  GROUP
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  POST
  SYSTEM
}

enum DeliveryStatus {
  SENT
  DELIVERED
  READ
} 
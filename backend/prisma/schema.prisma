generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  name                     String
  username                 String?                   @unique
  password                 String
  avatar                   String?
  bio                      String?
  location                 String?
  website                  String?
  isPrivate                Boolean                   @default(false)
  isVerified               Boolean                   @default(false)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  canPublishLockedMedia    Boolean                   @default(false)
  emailVerified            Boolean                   @default(false)
  emailVerifiedAt          DateTime?
  lineManagerId            String?
  comments                 Comment[]
  conversationParticipants ConversationParticipant[] @relation("ConversationParticipants")
  conversationsCreated     Conversation[]            @relation("ConversationCreator")
  facetHistory             FacetAssignmentHistory[]
  facetAssignments         FacetAssignment[]
  followers                Follows[]                 @relation("UserFollowers")
  following                Follows[]                 @relation("UserFollowing")
  friendRequestsReceived   FriendRequest[]           @relation("UserFriendRequestsReceived")
  friendRequestsSent       FriendRequest[]           @relation("UserFriendRequestsSent")
  galleries                Gallery[]
  groupActions             GroupAction[]             @relation("GroupActions")
  groupApplications        GroupApplication[]        @relation("GroupApplications")
  groupApplicationReviews  GroupApplication[]        @relation("GroupApplicationReviews")
  groupInvitationsReceived GroupInvitation[]         @relation("GroupInvitationsReceived")
  groupInvitationsSent     GroupInvitation[]         @relation("GroupInvitationsSent")
  groupMemberships         GroupMember[]
  groupPostApprovals       GroupPost[]               @relation("GroupPostApprovals")
  groupPostRejections      GroupPost[]               @relation("GroupPostRejections")
  media                    Media[]
  mediaProcessingJobs      MediaProcessingJob[]
  mentions                 Mention[]
  messageDeliveryStatus    MessageDeliveryStatus[]   @relation("MessageDeliveryStatus")
  messageReactions         MessageReaction[]         @relation("MessageReactions")
  messagesSent             Message[]                 @relation("MessageSender")
  notifications            Notification[]
  permissionAudits         PermissionAuditLog[]
  posts                    Post[]
  reactions                Reaction[]
  searchHistory            SearchHistory[]
  unlockedMessages         UnlockedMessage[]         @relation("UnlockedMessages")
  unlockedPosts            UnlockedPost[]            @relation("UnlockedPosts")
  userSessions             UserSession[]             @relation("UserSessions")
  lineManager              User?                     @relation("LineManagement", fields: [lineManagerId], references: [id])
  directReports            User[]                    @relation("LineManagement")

  @@index([lineManagerId])
  @@map("users")
}

model Post {
  id                String            @id @default(cuid())
  title             String?
  content           String
  publicationStatus PublicationStatus @default(PUBLIC)
  visibility        Visibility        @default(PUBLIC)
  authorId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isLocked          Boolean           @default(false)
  unlockPrice       Int?
  comments          Comment[]
  groupPosts        GroupPost[]
  mentions          Mention[]
  notifications     Notification[]
  media             PostMedia[]
  author            User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions         Reaction[]
  unlockedBy        UnlockedPost[]    @relation("UnlockedPosts")
  hashtags          Hashtag[]         @relation("HashtagToPost")

  @@map("posts")
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  postId        String?
  authorId      String
  parentId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  mediaId       String?
  context       CommentContext @default(FEED)
  groupId       String?
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  group         Group?         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  media         Media?         @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  parent        Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies       Comment[]      @relation("CommentReplies")
  post          Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]
  reactions     Reaction[]

  @@index([groupId])
  @@map("comments")
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  postId    String?
  commentId String?
  authorId  String
  createdAt DateTime     @default(now())
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, authorId])
  @@unique([commentId, authorId])
  @@map("reactions")
}

model Media {
  id                  String               @id @default(cuid())
  url                 String
  s3Key               String?
  originalFilename    String?
  altText             String?
  caption             String?
  width               Int?
  height              Int?
  size                Int?
  mimeType            String?
  tags                String[]             @default([])
  visibility          Visibility           @default(PUBLIC)
  postId              String?
  authorId            String
  galleryId           String?
  order               Int                  @default(0)
  mediaType           MediaType            @default(IMAGE)
  processingStatus    ProcessingStatus     @default(COMPLETED)
  duration            Float?
  codec               String?
  bitrate             Int?
  framerate           Float?
  videoUrl            String?
  videoS3Key          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  originalPath        String?
  zipMediaId          String?
  metadata            Json?
  versions            Json?
  thumbnails          Json?
  comments            Comment[]
  coverForGallery     Gallery?             @relation("GalleryCover")
  groupAvatar         Group?               @relation("GroupAvatar")
  groupCoverPhoto     Group?               @relation("GroupCoverPhoto")
  author              User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  gallery             Gallery?             @relation(fields: [galleryId], references: [id])
  mediaProcessingJobs MediaProcessingJob[]
  messageMediaItems   MessageMedia[]       @relation("MessageMediaItems")
  messages            Message[]            @relation("MessageMedia")
  posts               PostMedia[]

  @@index([zipMediaId])
  @@index([metadata])
  @@map("media")
}

model Gallery {
  id           String     @id @default(cuid())
  name         String
  description  String?
  visibility   Visibility @default(PUBLIC)
  authorId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  coverMediaId String?    @unique
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coverMedia   Media?     @relation("GalleryCover", fields: [coverMediaId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  media        Media[]

  @@map("galleries")
}

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Post[]   @relation("HashtagToPost")

  @@map("hashtags")
}

model Mention {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("mentions")
}

model Follows {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model FriendRequest {
  id         String              @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  receiver   User                @relation("UserFriendRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User                @relation("UserFriendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model PostMedia {
  id       String  @id @default(cuid())
  postId   String
  mediaId  String
  order    Int     @default(0)
  isLocked Boolean @default(false)
  media    Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@map("post_media")
}

model MediaProcessingJob {
  id               String           @id @default(cuid())
  mediaId          String
  userId           String
  mediaType        MediaType
  s3Key            String
  originalFilename String
  status           ProcessingStatus @default(PENDING)
  progress         Int              @default(0)
  currentStep      String?
  errorMessage     String?
  thumbnails       Json?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  completedAt      DateTime?
  versions         Json?
  media            Media            @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media_processing_jobs")
}

model Conversation {
  id            String                    @id @default(cuid())
  type          ConversationType          @default(DIRECT)
  name          String?
  avatarUrl     String?
  createdById   String
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  lastMessageAt DateTime?
  isActive      Boolean                   @default(true)
  participants  ConversationParticipant[]
  createdBy     User                      @relation("ConversationCreator", fields: [createdById], references: [id], onDelete: Cascade)
  messages      Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  isActive       Boolean         @default(true)
  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User            @relation("ConversationParticipants", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id                String                  @id @default(cuid())
  conversationId    String
  senderId          String
  content           String?
  messageType       MessageType             @default(TEXT)
  mediaId           String?
  replyToId         String?
  encryptedContent  String?
  encryptionVersion Int                     @default(1)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  isDeleted         Boolean                 @default(false)
  isLocked          Boolean                 @default(false)
  unlockPrice       Int?
  deliveryStatus    MessageDeliveryStatus[]
  mediaItems        MessageMedia[]          @relation("MessageMediaItems")
  reactions         MessageReaction[]
  conversation      Conversation            @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  media             Media?                  @relation("MessageMedia", fields: [mediaId], references: [id])
  sender            User                    @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  unlockedBy        UnlockedMessage[]       @relation("UnlockedMessages")

  @@map("messages")
}

model MessageMedia {
  id        String  @id @default(cuid())
  messageId String
  mediaId   String
  order     Int     @default(0)
  isLocked  Boolean @default(false)
  media     Media   @relation("MessageMediaItems", fields: [mediaId], references: [id], onDelete: Cascade)
  message   Message @relation("MessageMediaItems", fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, mediaId])
  @@map("message_media")
}

model MessageDeliveryStatus {
  id          String         @id @default(cuid())
  messageId   String
  userId      String
  status      DeliveryStatus @default(SENT)
  deliveredAt DateTime?
  readAt      DateTime?
  message     Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User           @relation("MessageDeliveryStatus", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_delivery_status")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  reaction  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation("MessageReactions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, reaction])
  @@map("message_reactions")
}

model UnlockedPost {
  id         String   @id @default(cuid())
  userId     String
  postId     String
  paidAmount Int
  unlockedAt DateTime @default(now())
  post       Post     @relation("UnlockedPosts", fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation("UnlockedPosts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("unlocked_posts")
}

model UnlockedMessage {
  id         String   @id @default(cuid())
  userId     String
  messageId  String
  paidAmount Int
  unlockedAt DateTime @default(now())
  message    Message  @relation("UnlockedMessages", fields: [messageId], references: [id], onDelete: Cascade)
  user       User     @relation("UnlockedMessages", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
  @@map("unlocked_messages")
}

model UserSession {
  id         String   @id @default(cuid())
  userId     String
  sessionId  String   @unique
  deviceInfo Json?
  lastSeen   DateTime @default(now())
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  user       User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Group {
  id               String                @id @default(cuid())
  name             String
  username         String                @unique
  description      String?
  rules            String?
  visibility       GroupVisibility       @default(PRIVATE_VISIBLE)
  type             GroupType             @default(GENERAL)
  moderationPolicy GroupModerationPolicy @default(NO_MODERATION)
  isActive         Boolean               @default(true)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  avatarId         String?               @unique
  coverPhotoId     String?               @unique
  comments         Comment[]
  actions          GroupAction[]
  applications     GroupApplication[]
  invitations      GroupInvitation[]
  members          GroupMember[]
  posts            GroupPost[]
  avatarMedia      Media?                @relation("GroupAvatar", fields: [avatarId], references: [id])
  coverPhotoMedia  Media?                @relation("GroupCoverPhoto", fields: [coverPhotoId], references: [id])

  @@map("groups")
}

model GroupMember {
  id          String            @id @default(cuid())
  groupId     String
  userId      String
  role        GroupMemberRole   @default(MEMBER)
  status      GroupMemberStatus @default(ACTIVE)
  joinedAt    DateTime          @default(now())
  leftAt      DateTime?
  suspendedAt DateTime?
  bannedAt    DateTime?
  group       Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model GroupPost {
  id              String          @id @default(cuid())
  groupId         String
  postId          String
  status          GroupPostStatus @default(PENDING_APPROVAL)
  isPriority      Boolean         @default(false)
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  approvedByUser  User?           @relation("GroupPostApprovals", fields: [approvedBy], references: [id])
  group           Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  post            Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  rejectedByUser  User?           @relation("GroupPostRejections", fields: [rejectedBy], references: [id])

  @@unique([groupId, postId])
  @@map("group_posts")
}

model GroupInvitation {
  id            String    @id @default(cuid())
  groupId       String
  inviterId     String
  inviteeEmail  String?
  inviteeUserId String?
  inviteCode    String    @unique
  expiresAt     DateTime
  acceptedAt    DateTime?
  createdAt     DateTime  @default(now())
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  invitee       User?     @relation("GroupInvitationsReceived", fields: [inviteeUserId], references: [id])
  inviter       User      @relation("GroupInvitationsSent", fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("group_invitations")
}

model GroupApplication {
  id          String              @id @default(cuid())
  groupId     String
  applicantId String
  message     String?
  status      FriendRequestStatus @default(PENDING)
  reviewedAt  DateTime?
  reviewedBy  String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  applicant   User                @relation("GroupApplications", fields: [applicantId], references: [id], onDelete: Cascade)
  group       Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  reviewer    User?               @relation("GroupApplicationReviews", fields: [reviewedBy], references: [id])

  @@unique([groupId, applicantId])
  @@map("group_applications")
}

model GroupAction {
  id          String          @id @default(cuid())
  groupId     String
  userId      String
  actionType  GroupActionType
  description String
  metadata    Json?
  createdAt   DateTime        @default(now())
  group       Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User            @relation("GroupActions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("group_actions")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([email, code])
  @@map("email_verifications")
}

model Facet {
  id             String                   @id @default(cuid())
  scope          String
  name           String
  value          String                   @default("")
  description    String?
  requiresAudit  Boolean                  @default(true)
  expiryDays     Int?
  requiresReview Boolean                  @default(false)
  reviewDays     Int?
  parentFacetId  String?
  hierarchyLevel Int                      @default(0)
  isActive       Boolean                  @default(true)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  history        FacetAssignmentHistory[]
  assignments    FacetAssignment[]
  parentFacet    Facet?                   @relation("FacetHierarchy", fields: [parentFacetId], references: [id])
  childFacets    Facet[]                  @relation("FacetHierarchy")

  @@unique([scope, name, value])
  @@index([scope, name])
  @@index([parentFacetId, hierarchyLevel])
  @@map("facets")
}

model FacetAssignment {
  id           String    @id @default(cuid())
  facetId      String
  entityType   String
  entityId     String
  assignedById String?
  assignedAt   DateTime  @default(now())
  expiresAt    DateTime?
  reviewAt     DateTime?
  reason       String?
  metadata     Json?
  isActive     Boolean   @default(true)
  assignedBy   User?     @relation(fields: [assignedById], references: [id])
  facet        Facet     @relation(fields: [facetId], references: [id], onDelete: Cascade)

  @@unique([facetId, entityType, entityId])
  @@index([entityType, entityId, isActive])
  @@index([expiresAt])
  @@index([reviewAt])
  @@map("facet_assignments")
}

model FacetAssignmentHistory {
  id                String      @id @default(cuid())
  facetId           String
  entityType        String
  entityId          String
  action            FacetAction
  performedById     String?
  performedAt       DateTime    @default(now())
  reason            String?
  expiresAt         DateTime?
  previousExpiresAt DateTime?
  metadata          Json?
  facet             Facet       @relation(fields: [facetId], references: [id], onDelete: Cascade)
  performedBy       User?       @relation(fields: [performedById], references: [id])

  @@index([entityType, entityId, performedAt])
  @@index([facetId])
  @@index([performedAt])
  @@map("facet_assignment_history")
}

model PermissionAuditLog {
  id              String   @id @default(cuid())
  userId          String?
  resourceType    String
  resourceId      String
  operation       String
  granted         Boolean
  reason          String
  reasonCode      String?
  ipAddress       String?
  userAgent       String?
  requestId       String?
  executionTimeMs Int?
  facetsChecked   Json?
  createdAt       DateTime @default(now())
  user            User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([resourceType, resourceId])
  @@index([operation, granted])
  @@index([createdAt])
  @@map("permission_audit_logs")
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum PublicationStatus {
  PUBLIC
  PAUSED
  CONTROLLED
  DELETED
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
  ZIP
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
  FAILED
}

enum ConversationType {
  DIRECT
  GROUP
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  SYSTEM
  POST
}

enum DeliveryStatus {
  SENT
  DELIVERED
  READ
}

enum CommentContext {
  FEED
  GROUP
  USER_PAGE
}

enum GroupVisibility {
  PUBLIC
  PRIVATE_VISIBLE
  PRIVATE_HIDDEN
}

enum GroupType {
  GENERAL
  SOCIAL_LEARNING
  GAMING
  JOBS
  BUY_SELL
  PARENTING
  WORK
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum GroupMemberStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING_APPROVAL
}

enum GroupPostStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  DELETED
}

enum GroupModerationPolicy {
  NO_MODERATION
  ADMIN_APPROVAL_REQUIRED
  AI_FILTER
  SELECTIVE_MODERATION
}

enum GroupActionType {
  GROUP_CREATED
  GROUP_UPDATED
  MEMBER_JOINED
  MEMBER_LEFT
  MEMBER_PROMOTED
  MEMBER_DEMOTED
  MEMBER_SUSPENDED
  MEMBER_BANNED
  POST_APPROVED
  POST_REJECTED
  POST_DELETED
  COMMENT_APPROVED
  COMMENT_REJECTED
  COMMENT_DELETED
  RULES_UPDATED
  SETTINGS_CHANGED
}

enum FacetAction {
  ASSIGNED
  REVOKED
  EXPIRED
  REVIEWED
  EXTENDED
  MODIFIED
}

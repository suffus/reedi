generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id             String          @id
  content        String
  postId         String?
  authorId       String
  parentId       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  mediaId        String?
  users          users           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  media          media?          @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  comments       comments?       @relation("commentsTocomments", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  other_comments comments[]      @relation("commentsTocomments")
  posts          posts?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications  notifications[]
  reactions      reactions[]
}

model conversation_participants {
  id             String          @id
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  isActive       Boolean         @default(true)
  conversations  conversations   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  users          users           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model conversations {
  id                        String                      @id
  type                      ConversationType            @default(DIRECT)
  name                      String?
  avatarUrl                 String?
  createdById               String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  lastMessageAt             DateTime?
  isActive                  Boolean                     @default(true)
  conversation_participants conversation_participants[]
  users                     users                       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  messages                  messages[]
}

model email_verifications {
  id        String   @id
  email     String
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([email, code])
}

model facet_assignment_history {
  id                String      @id
  facetId           String
  entityType        String
  entityId          String
  action            FacetAction
  performedById     String?
  performedAt       DateTime    @default(now())
  reason            String?
  expiresAt         DateTime?
  previousExpiresAt DateTime?
  metadata          Json?
  facets            facets      @relation(fields: [facetId], references: [id], onDelete: Cascade)
  users             users?      @relation(fields: [performedById], references: [id])

  @@index([entityType, entityId, performedAt])
  @@index([facetId])
  @@index([performedAt])
}

model facet_assignments {
  id           String    @id
  facetId      String
  entityType   String
  entityId     String
  assignedById String?
  assignedAt   DateTime  @default(now())
  expiresAt    DateTime?
  reviewAt     DateTime?
  reason       String?
  metadata     Json?
  isActive     Boolean   @default(true)
  users        users?    @relation(fields: [assignedById], references: [id])
  facets       facets    @relation(fields: [facetId], references: [id], onDelete: Cascade)

  @@unique([facetId, entityType, entityId])
  @@index([entityType, entityId, isActive])
  @@index([expiresAt])
  @@index([reviewAt])
}

model facets {
  id                       String                     @id
  scope                    String
  name                     String
  value                    String                     @default("")
  description              String?
  requiresAudit            Boolean                    @default(true)
  expiryDays               Int?
  requiresReview           Boolean                    @default(false)
  reviewDays               Int?
  parentFacetId            String?
  hierarchyLevel           Int                        @default(0)
  isActive                 Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  facet_assignment_history facet_assignment_history[]
  facet_assignments        facet_assignments[]
  facets                   facets?                    @relation("facetsTofacets", fields: [parentFacetId], references: [id])
  other_facets             facets[]                   @relation("facetsTofacets")

  @@unique([scope, name, value])
  @@index([parentFacetId, hierarchyLevel])
  @@index([scope, name])
}

model follows {
  id                               String   @id
  followerId                       String
  followingId                      String
  createdAt                        DateTime @default(now())
  users_follows_followerIdTousers  users    @relation("follows_followerIdTousers", fields: [followerId], references: [id], onDelete: Cascade)
  users_follows_followingIdTousers users    @relation("follows_followingIdTousers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model friend_requests {
  id                                      String              @id
  senderId                                String
  receiverId                              String
  status                                  FriendRequestStatus @default(PENDING)
  createdAt                               DateTime            @default(now())
  updatedAt                               DateTime
  users_friend_requests_receiverIdTousers users               @relation("friend_requests_receiverIdTousers", fields: [receiverId], references: [id], onDelete: Cascade)
  users_friend_requests_senderIdTousers   users               @relation("friend_requests_senderIdTousers", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model galleries {
  id                                  String     @id
  name                                String
  description                         String?
  visibility                          Visibility @default(PUBLIC)
  authorId                            String
  createdAt                           DateTime   @default(now())
  updatedAt                           DateTime
  coverMediaId                        String?    @unique
  users                               users      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  media_galleries_coverMediaIdTomedia media?     @relation("galleries_coverMediaIdTomedia", fields: [coverMediaId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  media_media_galleryIdTogalleries    media[]    @relation("media_galleryIdTogalleries")
}

model group_actions {
  id          String          @id
  groupId     String
  userId      String
  actionType  GroupActionType
  description String
  metadata    Json?
  createdAt   DateTime        @default(now())
  groups      groups          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users       users           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model group_applications {
  id                                          String              @id
  groupId                                     String
  applicantId                                 String
  message                                     String?
  status                                      FriendRequestStatus @default(PENDING)
  reviewedAt                                  DateTime?
  reviewedBy                                  String?
  createdAt                                   DateTime            @default(now())
  updatedAt                                   DateTime
  users_group_applications_applicantIdTousers users               @relation("group_applications_applicantIdTousers", fields: [applicantId], references: [id], onDelete: Cascade)
  groups                                      groups              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users_group_applications_reviewedByTousers  users?              @relation("group_applications_reviewedByTousers", fields: [reviewedBy], references: [id])

  @@unique([groupId, applicantId])
}

model group_invitations {
  id                                           String    @id
  groupId                                      String
  inviterId                                    String
  inviteeEmail                                 String?
  inviteeUserId                                String?
  inviteCode                                   String    @unique
  expiresAt                                    DateTime
  acceptedAt                                   DateTime?
  createdAt                                    DateTime  @default(now())
  groups                                       groups    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users_group_invitations_inviteeUserIdTousers users?    @relation("group_invitations_inviteeUserIdTousers", fields: [inviteeUserId], references: [id])
  users_group_invitations_inviterIdTousers     users     @relation("group_invitations_inviterIdTousers", fields: [inviterId], references: [id], onDelete: Cascade)
}

model group_members {
  id          String            @id
  groupId     String
  userId      String
  role        GroupMemberRole   @default(MEMBER)
  status      GroupMemberStatus @default(ACTIVE)
  joinedAt    DateTime          @default(now())
  leftAt      DateTime?
  suspendedAt DateTime?
  bannedAt    DateTime?
  groups      groups            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users       users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model group_posts {
  id                                  String          @id
  groupId                             String
  postId                              String
  status                              GroupPostStatus @default(PENDING_APPROVAL)
  isPriority                          Boolean         @default(false)
  approvedAt                          DateTime?
  approvedBy                          String?
  rejectedAt                          DateTime?
  rejectedBy                          String?
  rejectionReason                     String?
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime
  users_group_posts_approvedByTousers users?          @relation("group_posts_approvedByTousers", fields: [approvedBy], references: [id])
  groups                              groups          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  posts                               posts           @relation(fields: [postId], references: [id], onDelete: Cascade)
  users_group_posts_rejectedByTousers users?          @relation("group_posts_rejectedByTousers", fields: [rejectedBy], references: [id])

  @@unique([groupId, postId])
}

model groups {
  id                               String                @id
  name                             String
  username                         String                @unique
  description                      String?
  rules                            String?
  visibility                       GroupVisibility       @default(PRIVATE_VISIBLE)
  type                             GroupType             @default(GENERAL)
  moderationPolicy                 GroupModerationPolicy @default(NO_MODERATION)
  isActive                         Boolean               @default(true)
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime
  avatarId                         String?               @unique
  coverPhotoId                     String?               @unique
  group_actions                    group_actions[]
  group_applications               group_applications[]
  group_invitations                group_invitations[]
  group_members                    group_members[]
  group_posts                      group_posts[]
  media_groups_avatarIdTomedia     media?                @relation("groups_avatarIdTomedia", fields: [avatarId], references: [id])
  media_groups_coverPhotoIdTomedia media?                @relation("groups_coverPhotoIdTomedia", fields: [coverPhotoId], references: [id])
}

model hashtags {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now())
  posts     posts[]  @relation("HashtagToPost")
}

model media {
  id                                      String                  @id
  url                                     String
  thumbnail                               String?
  s3Key                                   String?
  thumbnailS3Key                          String?
  originalFilename                        String?
  altText                                 String?
  caption                                 String?
  width                                   Int?
  height                                  Int?
  size                                    Int?
  mimeType                                String?
  tags                                    String[]                @default([])
  visibility                              Visibility              @default(PUBLIC)
  postId                                  String?
  authorId                                String
  galleryId                               String?
  order                                   Int                     @default(0)
  mediaType                               MediaType               @default(IMAGE)
  processingStatus                        ProcessingStatus        @default(COMPLETED)
  duration                                Float?
  codec                                   String?
  bitrate                                 Int?
  framerate                               Float?
  videoUrl                                String?
  videoS3Key                              String?
  createdAt                               DateTime                @default(now())
  updatedAt                               DateTime
  videoMetadata                           Json?
  videoProcessingStatus                   ProcessingStatus?
  videoThumbnails                         Json?
  videoVersions                           Json?
  imageMetadata                           Json?
  imageProcessingStatus                   ProcessingStatus?
  imageVersions                           Json?
  comments                                comments[]
  galleries_galleries_coverMediaIdTomedia galleries?              @relation("galleries_coverMediaIdTomedia")
  groups_groups_avatarIdTomedia           groups?                 @relation("groups_avatarIdTomedia")
  groups_groups_coverPhotoIdTomedia       groups?                 @relation("groups_coverPhotoIdTomedia")
  users                                   users                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  galleries_media_galleryIdTogalleries    galleries?              @relation("media_galleryIdTogalleries", fields: [galleryId], references: [id])
  media_processing_jobs                   media_processing_jobs[]
  message_media                           message_media[]
  messages                                messages[]
  post_media                              post_media[]
}

model media_processing_jobs {
  id               String           @id
  mediaId          String
  userId           String
  mediaType        MediaType
  s3Key            String
  originalFilename String
  status           ProcessingStatus @default(PENDING)
  progress         Int              @default(0)
  currentStep      String?
  errorMessage     String?
  thumbnails       Json?
  videoVersions    Json?
  imageVersions    Json?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  completedAt      DateTime?
  media            media            @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  users            users            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model mentions {
  id        String   @id
  postId    String
  userId    String
  createdAt DateTime @default(now())
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model message_delivery_status {
  id          String         @id
  messageId   String
  userId      String
  status      DeliveryStatus @default(SENT)
  deliveredAt DateTime?
  readAt      DateTime?
  messages    messages       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  users       users          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model message_media {
  id        String   @id
  messageId String
  mediaId   String
  order     Int      @default(0)
  isLocked  Boolean  @default(false)
  media     media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  messages  messages @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, mediaId])
}

model message_reactions {
  id        String   @id
  messageId String
  userId    String
  reaction  String
  createdAt DateTime @default(now())
  messages  messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, reaction])
}

model messages {
  id                      String                    @id
  conversationId          String
  senderId                String
  content                 String?
  messageType             MessageType               @default(TEXT)
  mediaId                 String?
  replyToId               String?
  encryptedContent        String?
  encryptionVersion       Int                       @default(1)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  isDeleted               Boolean                   @default(false)
  isLocked                Boolean                   @default(false)
  unlockPrice             Int?
  message_delivery_status message_delivery_status[]
  message_media           message_media[]
  message_reactions       message_reactions[]
  conversations           conversations             @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  media                   media?                    @relation(fields: [mediaId], references: [id])
  users                   users                     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  unlocked_messages       unlocked_messages[]
}

model notifications {
  id        String           @id
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comments  comments?        @relation(fields: [commentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  posts     posts?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  users     users            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model permission_audit_logs {
  id              String   @id
  userId          String?
  resourceType    String
  resourceId      String
  operation       String
  granted         Boolean
  reason          String
  reasonCode      String?
  ipAddress       String?
  userAgent       String?
  requestId       String?
  executionTimeMs Int?
  facetsChecked   Json?
  createdAt       DateTime @default(now())
  users           users?   @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([operation, granted])
  @@index([resourceType, resourceId])
  @@index([userId, createdAt])
}

model post_media {
  id       String  @id
  postId   String
  mediaId  String
  order    Int     @default(0)
  isLocked Boolean @default(false)
  media    media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  posts    posts   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
}

model posts {
  id                String            @id
  title             String?
  content           String
  publicationStatus PublicationStatus @default(PUBLIC)
  visibility        Visibility        @default(PUBLIC)
  authorId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  isLocked          Boolean           @default(false)
  unlockPrice       Int?
  comments          comments[]
  group_posts       group_posts[]
  mentions          mentions[]
  notifications     notifications[]
  post_media        post_media[]
  users             users             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions         reactions[]
  unlocked_posts    unlocked_posts[]
  hashtags          hashtags[]        @relation("HashtagToPost")
}

model reactions {
  id        String       @id
  type      ReactionType
  postId    String?
  commentId String?
  authorId  String
  createdAt DateTime     @default(now())
  users     users        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  comments?    @relation(fields: [commentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  posts     posts?       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([commentId, authorId])
  @@unique([postId, authorId])
}

model search_history {
  id        String   @id
  query     String
  userId    String
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model unlocked_messages {
  id         String   @id
  userId     String
  messageId  String
  paidAmount Int
  unlockedAt DateTime @default(now())
  messages   messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}

model unlocked_posts {
  id         String   @id
  userId     String
  postId     String
  paidAmount Int
  unlockedAt DateTime @default(now())
  posts      posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model user_sessions {
  id         String   @id
  userId     String
  sessionId  String   @unique
  deviceInfo Json?
  lastSeen   DateTime @default(now())
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                                                       String                      @id
  email                                                    String                      @unique
  name                                                     String
  username                                                 String?                     @unique
  password                                                 String
  avatar                                                   String?
  bio                                                      String?
  location                                                 String?
  website                                                  String?
  isPrivate                                                Boolean                     @default(false)
  isVerified                                               Boolean                     @default(false)
  createdAt                                                DateTime                    @default(now())
  updatedAt                                                DateTime
  canPublishLockedMedia                                    Boolean                     @default(false)
  emailVerified                                            Boolean                     @default(false)
  emailVerifiedAt                                          DateTime?
  lineManagerId                                            String?
  comments                                                 comments[]
  conversation_participants                                conversation_participants[]
  conversations                                            conversations[]
  facet_assignment_history                                 facet_assignment_history[]
  facet_assignments                                        facet_assignments[]
  follows_follows_followerIdTousers                        follows[]                   @relation("follows_followerIdTousers")
  follows_follows_followingIdTousers                       follows[]                   @relation("follows_followingIdTousers")
  friend_requests_friend_requests_receiverIdTousers        friend_requests[]           @relation("friend_requests_receiverIdTousers")
  friend_requests_friend_requests_senderIdTousers          friend_requests[]           @relation("friend_requests_senderIdTousers")
  galleries                                                galleries[]
  group_actions                                            group_actions[]
  group_applications_group_applications_applicantIdTousers group_applications[]        @relation("group_applications_applicantIdTousers")
  group_applications_group_applications_reviewedByTousers  group_applications[]        @relation("group_applications_reviewedByTousers")
  group_invitations_group_invitations_inviteeUserIdTousers group_invitations[]         @relation("group_invitations_inviteeUserIdTousers")
  group_invitations_group_invitations_inviterIdTousers     group_invitations[]         @relation("group_invitations_inviterIdTousers")
  group_members                                            group_members[]
  group_posts_group_posts_approvedByTousers                group_posts[]               @relation("group_posts_approvedByTousers")
  group_posts_group_posts_rejectedByTousers                group_posts[]               @relation("group_posts_rejectedByTousers")
  media                                                    media[]
  media_processing_jobs                                    media_processing_jobs[]
  mentions                                                 mentions[]
  message_delivery_status                                  message_delivery_status[]
  message_reactions                                        message_reactions[]
  messages                                                 messages[]
  notifications                                            notifications[]
  permission_audit_logs                                    permission_audit_logs[]
  posts                                                    posts[]
  reactions                                                reactions[]
  search_history                                           search_history[]
  unlocked_messages                                        unlocked_messages[]
  unlocked_posts                                           unlocked_posts[]
  user_sessions                                            user_sessions[]
  users                                                    users?                      @relation("usersTousers", fields: [lineManagerId], references: [id])
  other_users                                              users[]                     @relation("usersTousers")

  @@index([lineManagerId])
}

enum ConversationType {
  DIRECT
  GROUP
}

enum DeliveryStatus {
  SENT
  DELIVERED
  READ
}

enum FacetAction {
  ASSIGNED
  REVOKED
  EXPIRED
  REVIEWED
  EXTENDED
  MODIFIED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum GroupActionType {
  GROUP_CREATED
  GROUP_UPDATED
  MEMBER_JOINED
  MEMBER_LEFT
  MEMBER_PROMOTED
  MEMBER_DEMOTED
  MEMBER_SUSPENDED
  MEMBER_BANNED
  POST_APPROVED
  POST_REJECTED
  POST_DELETED
  COMMENT_APPROVED
  COMMENT_REJECTED
  COMMENT_DELETED
  RULES_UPDATED
  SETTINGS_CHANGED
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum GroupMemberStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING_APPROVAL
}

enum GroupModerationPolicy {
  NO_MODERATION
  ADMIN_APPROVAL_REQUIRED
  AI_FILTER
  SELECTIVE_MODERATION
}

enum GroupPostStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  DELETED
}

enum GroupType {
  GENERAL
  SOCIAL_LEARNING
  GAMING
  JOBS
  BUY_SELL
  PARENTING
  WORK
}

enum GroupVisibility {
  PUBLIC
  PRIVATE_VISIBLE
  PRIVATE_HIDDEN
}

enum MediaType {
  IMAGE
  VIDEO
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  SYSTEM
  POST
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
  FAILED
}

enum PublicationStatus {
  PUBLIC
  PAUSED
  CONTROLLED
  DELETED
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}
